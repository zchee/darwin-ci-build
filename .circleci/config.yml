version: 2.1

env: &env
  environment:
    HOMEBREW_CACHE: /Users/distiller/.cache/Homebrew
    HOMEBREW_DEBUG: "1"
    HOMEBREW_DEVELOPER: "0"
    # HOMEBREW_GITHUB_API_TOKEN:
    HOMEBREW_MAKE_JOBS: 16
    HOMEBREW_NO_ANALYTICS: "1"
    HOMEBREW_NO_AUTO_UPDATE: "1"
    HOMEBREW_NO_INSTALL_CLEANUP: "1"
    HOMEBREW_VERBOSE: "1"

commands:
  build-llvm:
    steps:
      - run:
          name: Show kernel versions
          command: |
            uname -a
            sw_vers
            xcodebuild -version
            system_profiler SPHardwareDataType

      - run:
          name: mkdir HOMEBREW_CACHE directory and touch linkage.json
          command: |
            mkdir -p $HOMEBREW_CACHE
            touch /Users/distiller/.cache/Homebrew/linkage.json

      - restore_cache:
          name: Restore Homebrew cache
          keys:
            - homebrew-{{ checksum "/Users/distiller/.cache/Homebrew/linkage.json" }}
      - run:
          name: Upgrade Homebrew formulas
          command: |
            brew upgrade --display-times
      - save_cache:
          name: Save Homebrew cache
          key: homebrew-{{ checksum "/Users/distiller/.cache/Homebrew/linkage.json" }}
          paths: "/Users/distiller/.cache/Homebrew"

      - run:
          name: Install dependency tools from homebrew
          command: |
            brew list
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/binutils.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/cmake.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/doxygen.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/gnu-tar.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/libxml2.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/ninja.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/pkg-config.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/protobuf.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/sphinx-doc.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/swig.rb
            # brew link --force libffi libxml2 sphinx-doc
            # pip3 install -U pip setuptools

      - run:
          name: Generate lldb_codesign to Keychain
          command: |
            ./scripts/codesign.bash lldb_codesign
            rm -f ./lldb_codesign.*

      - run:
          name: Install LLVM toolchain via Homebrew
          command: |
            brew tap zchee/formula
            brew install zchee/formula/llvm-toolchain --build-from-source

      # - run:
      #     name: Fetch LLVM resources
      #     command: |
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/llvm.git llvm
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/compiler-rt.git llvm/projects/compiler-rt
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/libcxx.git llvm/projects/libcxx
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/libunwind.git llvm/projects/libunwind
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/openmp.git llvm/projects/openmp
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/clang.git llvm/tools/clang
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/clang-tools-extra.git llvm/tools/clang/tools/extra
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/lld.git llvm/tools/lld
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/lldb.git llvm/tools/lldb
      #       git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/polly.git llvm/tools/polly
      # - run:
      #     name: Configure cmake
      #     working_directory: ~/src/build
      #     command: |
      #       cmake -G Ninja ../llvm \
      #         \
      #         -DCMAKE_BUILD_TYPE:STRING='Release' \
      #         -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE \
      #         -DCMAKE_INSTALL_PREFIX:PATH='~/src/dist' \
      #         -DCMAKE_OSX_ARCHITECTURES:STRING="$(uname -m)" \
      #         -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING="$(xcrun --sdk macosx --show-sdk-version)" \
      #         -DCMAKE_OSX_SYSROOT:PATH="$(xcrun --sdk macosx --show-sdk-path)" \
      #         \
      #         -DCLANG_DEFAULT_OBJCOPY:STRING="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin/objcopy" \
      #         -DCMAKE_OBJCOPY:FILEPATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin/objcopy" \
      #         -DCMAKE_OBJDUMP:FILEPATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin/objdump" \
      #         \
      #         -DBUILD_SHARED_LIBS:BOOL=FALSE \
      #         -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER:BOOL=TRUE \
      #         \
      #         -DCLANG_ANALYZER_BUILD_Z3:BOOL=FALSE \
      #         -DCLANG_ENABLE_PROTO_FUZZER:BOOL=TRUE \
      #         -DCLANG_INCLUDE_DOCS:BOOL=TRUE \
      #         -DCLANG_INCLUDE_TESTS:BOOL=FALSE \
      #         -DCLANG_TOOLS_EXTRA_INCLUDE_DOCS:BOOL=TRUE \
      #         \
      #         -DCOMPILER_RT_ENABLE_IOS:BOOL=FALSE \
      #         -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN:BOOL=FALSE \
      #         -DCOMPILER_RT_EXTERNALIZE_DEBUGINFO:BOOL=TRUE \
      #         -DCOMPILER_RT_INCLUDE_TESTS:BOOL=FALSE \
      #         -DCOMPILER_RT_SANITIZERS_TO_BUILD:STRING='all' \
      #         \
      #         -DFFI_INCLUDE_DIR:PATH="$(pkg-config libffi --variable=includedir)" \
      #         -DFFI_LIBRARY_DIR:PATH="$(pkg-config libffi --variable=libdir)" \
      #         \
      #         -DLIBXML2_INCLUDE_DIR:PATH="$(pkg-config libxml-2.0 --variable=includedir)/libxml2" \
      #         -DLIBXML2_LIBRARY:FILEPATH="$(pkg-config libxml-2.0 --variable=libdir)/libxml2.dylib" \
      #         -DLIBXML2_XMLLINT_EXECUTABLE:FILEPATH="$(pkg-config libxml-2.0 --variable=exec_prefix)/bin/xmllint" \
      #         \
      #         -DLIBCLANG_BUILD_STATIC:BOOL=TRUE \
      #         \
      #         -DLLDB_BUILD_FRAMEWORK:BOOL=TRUE \
      #         -DLLDB_EXPORT_ALL_SYMBOLS:BOOL=FALSE \
      #         -DLLDB_USE_ENTITLEMENTS:BOOL=TRUE \
      #         -DDEBUGSERVER_PATH:PATH="$(dirname $(xcode-select --print-path))/SharedFrameworks/LLDB.framework/Versions/A/Resources/debugserver" \
      #         \
      #         -DLLVM_BUILD_DOCS:BOOL=TRUE \
      #         -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=TRUE \
      #         -DLLVM_BUILD_INSTRUMENTED:STRING=TRUE \
      #         -DLLVM_BUILD_LLVM_DYLIB=TRUE \
      #         -DLLVM_BUILD_STATIC:BOOL=FALSE \
      #         -DLLVM_CCACHE_BUILD:BOOL=TRUE \
      #         -DLLVM_CCACHE_DIR:PATH='../.ccache' \
      #         -DLLVM_CCACHE_MAXSIZE:STRING=10G \
      #         -DLLVM_ENABLE_ASSERTIONS:BOOL=TRUE \
      #         -DLLVM_ENABLE_CXX1Y:BOOL=TRUE \
      #         -DLLVM_ENABLE_CXX1Z:BOOL=TRUE \
      #         -DLLVM_ENABLE_EH:BOOL=TRUE \
      #         -DLLVM_ENABLE_FFI:BOOL=TRUE \
      #         -DLLVM_ENABLE_LTO:STRING=FALSE \
      #         -DLLVM_ENABLE_RTTI:BOOL=TRUE \
      #         -DLLVM_ENABLE_SPHINX:BOOL=TRUE \
      #         -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=FALSE \
      #         -DLLVM_EXTERNALIZE_DEBUGINFO:BOOL=TRUE \
      #         -DLLVM_INCLUDE_DOCS:BOOL=TRUE \
      #         -DLLVM_INCLUDE_EXAMPLES:BOOL=FALSE \
      #         -DLLVM_INCLUDE_TESTS:BOOL=FALSE \
      #         -DLLVM_INSTALL_UTILS:BOOL=TRUE \
      #         -DLLVM_LINK_LLVM_DYLIB:BOOL=FALSE \
      #         -DLLVM_NATIVE_ARCH:STRING=$(uname -m) \
      #         -DLLVM_OPTIMIZE_SANITIZED_BUILDS:BOOL=TRUE \
      #         -DLLVM_OPTIMIZED_TABLEGEN:BOOL=TRUE \
      #         -DLLVM_PARALLEL_COMPILE_JOBS:STRING="$(getconf _NPROCESSORS_ONLN)" \
      #         -DLLVM_PARALLEL_LINK_JOBS:STRING="$(getconf _NPROCESSORS_ONLN)" \
      #         -DLLVM_TARGET_ARCH:STRING=x86_64 \
      #         -DLLVM_TARGETS_TO_BUILD:STRING=X86 \
      #         -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=TRUE \
      #         -DLLVM_TOOL_LTO_BUILD:BOOL=FALSE \
      #         -DLLVM_USE_SPLIT_DWARF:BOOL=TRUE \
      #         \
      #         -DLINK_POLLY_INTO_TOOLS:BOOL=TRUE \
      #         -DPOLLY_BUNDLED_ISL:BOOL=TRUE \
      #         -DPOLLY_BUNDLED_JSONCPP:BOOL=TRUE \
      #         -DPOLLY_ENABLE_GPGPU_CODEGEN:BOOL=FALSE \
      #         -DWITH_POLLY:BOOL=TRUE \
      #         \
      #         -DPYTHON_EXECUTABLE:FILEPATH="$(pkg-config python2 --variable=prefix)/bin/python2.7" \
      #         -DPYTHON_INCLUDE_DIR:PATH="$(pkg-config python2 --variable=includedir)/python2.7" \
      #         -DPYTHON_LIBRARY:FILEPATH="$(pkg-config python2 --variable=libdir)/libpython2.7.dylib" \
      #         \
      #         -DSPHINX_EXECUTABLE:FILETYPE="$(command -v sphinx-build)" \
      #         -DSPHINX_OUTPUT_HTML:BOOL=FALSE \
      #         -DSPHINX_OUTPUT_MAN:BOOL=TRUE \
      #         -DSPHINX_WARNINGS_AS_ERRORS:BOOL=FALSE \
      #         \
      #         -Wno-dev
      # - run:
      #     name: Output cmake configure with -LA
      #     working_directory: ~/src/build
      #     command: |
      #       cmake -C . -LA || true
      # - run:
      #     name: Output cmake configure with -LAH
      #     working_directory: ~/src/build
      #     command: |
      #       cmake -LAH || true
      # - run:
      #     name: Compress build directory
      #     working_directory: ~/src/tarballs
      #     command: |
      #       /usr/local/bin/gtar --exclude 'profiles' -czf ~/src/tarballs/llvm-build-$(echo $CIRCLE_BRANCH | tr '._/' '-' | tr '[:upper:]' '[:lower:]')-$CIRCLE_BUILD_NUM.tar.gz ~/src/build
      # - run:
      #     name: Build LLVM toolchain
      #     working_directory: ~/src/build
      #     command: |
      #       export PATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin:$PATH"
      #       ninja -k 1000 || true
      # - run:
      #     name: Install LLVM toolchain
      #     working_directory: ~/src/build
      #     command: |
      #       export PATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin:$PATH"
      #       ninja install -k 1000 || true

      - run:
          name: Compress compiled LLVM toolchain
          working_directory: ~/src/tarballs
          command: |
            gtar -czf ~/src/tarballs/llvm-dist-$(echo $CIRCLE_BRANCH | tr '._/' '-' | tr '[:upper:]' '[:lower:]')-$CIRCLE_BUILD_NUM.tar.gz /usr/local/Cellar/llvm-toolchain/9.0.0

      - store_artifacts:
          path: ~/src/tarballs

jobs:
  xcode-10-3:
    macos:
      xcode: "10.3.0"
    <<: *env
    working_directory: ~/src/github.com/zchee/circleci-darwin-build
    shell: /bin/bash -eux -o pipefail
    steps:
      - checkout
      - build-llvm
  xcode-11-0:
    macos:
      xcode: "11.0.0"
    <<: *env
    working_directory: ~/src/github.com/zchee/circleci-darwin-build
    shell: /bin/bash -eux -o pipefail
    steps:
      - checkout
      - build-llvm
  xcode-11-1:
    macos:
      xcode: "11.1.0"
    <<: *env
    working_directory: ~/src/github.com/zchee/circleci-darwin-build
    shell: /bin/bash -eux -o pipefail
    steps:
      - checkout
      - build-llvm

workflows:
  version: 2
  build-llvm:
    jobs:
      - xcode-10-3:
          context: org-global
      - xcode-11-0:
          context: org-global
      - xcode-11-1:
          context: org-global
